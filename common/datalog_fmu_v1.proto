/*
* Brian R Taylor
* brian.taylor@bolderflight.com
* 
* Copyright (c) 2022 Bolder Flight Systems Inc
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the “Software”), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* This protobuf file describes the data log format, which is transpiled
* to a C header and source file for use in the flight code. There should
* only be a single message defined, DatalogMessage, which defines all
* of the data to be logged. The message structure should be flat
* (i.e. no nested messages), consisting of native types.
*/

syntax = "proto3";

/* Data log message */
message DatalogMessage {
  /* System data */
  int32 sys_frame_time_us = 1;
  float sys_input_volt = 2;
  float sys_reg_volt = 3;
  float sys_pwm_volt = 4;
  float sys_sbus_volt = 5;
  double sys_time_s = 6;

  /* Inceptor data */
  bool incept_installed = 20;
  bool incept_healthy = 21;
  bool incept_new_data = 22;
  bool incept_ch17 = 23;
  bool incept_ch18 = 24;
  repeated int32 incept_ch = 25;

  /* MPU-9250 IMU data */
  bool mpu9250_imu_installed = 40;
  bool mpu9250_imu_healthy = 41;
  bool mpu9250_imu_new_imu_data = 42;
  bool mpu9250_imu_new_mag_data = 43;
  float mpu9250_imu_die_temp_c = 44;
  repeated float mpu9250_imu_accel_mps2 = 45;
  repeated float mpu9250_imu_gyro_radps = 46;
  repeated float mpu9250_imu_mag_ut = 47;

  /* VectorNav IMU data */
  bool vector_nav_imu_installed = 50;
  bool vector_nav_imu_healthy = 51;
  bool vector_nav_imu_new_imu_data = 52;
  bool vector_nav_imu_new_mag_data = 53;
  float vector_nav_imu_die_temp_c = 54;
  repeated float vector_nav_imu_accel_mps2 = 55;
  repeated float vector_nav_imu_gyro_radps = 56;
  repeated float vector_nav_imu_mag_ut = 57;

  /* BME280 Pressure data */
  bool bme280_static_pres_installed = 60;
  bool bme280_static_pres_healthy = 61;
  bool bme280_static_pres_new_data = 62;
  float bme280_static_pres_die_temp_c = 63;
  float bme280_static_pres_pa = 64;

  /* VectorNav Pressure data */
  bool vector_nav_static_pres_installed = 70;
  bool vector_nav_static_pres_healthy = 71;
  bool vector_nav_static_pres_new_data = 72;
  float vector_nav_static_pres_die_temp_c = 73;
  float vector_nav_static_pres_pa = 74;

  /* AMS5915 Static Pressure data */
  bool ams5915_static_pres_installed = 80;
  bool ams5915_static_pres_healthy = 81;
  bool ams5915_static_pres_new_data = 82;
  float ams5915_static_pres_die_temp_c = 83;
  float ams5915_static_pres_pa = 84;

  /* AMS5915 Differential Pressure data */
  bool ams5915_diff_pres_installed = 90;
  bool ams5915_diff_pres_healthy = 91;
  bool ams5915_diff_pres_new_data = 92;
  float ams5915_diff_pres_die_temp_c = 93;
  float ams5915_diff_pres_pa = 94;

  /* VectorNav GNSS data */
  bool vector_nav_gnss_installed = 100;
  bool vector_nav_gnss_healthy = 101;
  bool vector_nav_gnss_new_data = 102;
  int32 vector_nav_gnss_fix = 103;
  int32 vector_nav_gnss_num_sats = 104;
  int32 vector_nav_gnss_week = 105;
  float vector_nav_gnss_alt_wgs84_m = 106;
  float vector_nav_gnss_horz_acc_m = 107;
  float vector_nav_gnss_vert_acc_m = 108;
  float vector_nav_gnss_vel_acc_mps = 109;
  repeated float vector_nav_gnss_ned_vel_mps = 110;
  double vector_nav_gnss_tow_s = 111;
  double vector_nav_gnss_lat_rad = 112;
  double vector_nav_gnss_lon_rad = 113;

  /* UBLOX3 GNSS data */
  bool ublox3_gnss_installed = 120;
  bool ublox3_gnss_healthy = 121;
  bool ublox3_gnss_new_data = 122;
  int32 ublox3_gnss_fix = 123;
  int32 ublox3_gnss_num_sats = 124;
  int32 ublox3_gnss_week = 125;
  float ublox3_gnss_alt_wgs84_m = 126;
  float ublox3_gnss_horz_acc_m = 127;
  float ublox3_gnss_vert_acc_m = 128;
  float ublox3_gnss_vel_acc_mps = 129;
  repeated float ublox3_gnss_ned_vel_mps = 130;
  double ublox3_gnss_tow_s = 131;
  double ublox3_gnss_lat_rad = 132;
  double ublox3_gnss_lon_rad = 133;

  /* UBLOX4 GNSS data */
  bool ublox4_gnss_installed = 140;
  bool ublox4_gnss_healthy = 141;
  bool ublox4_gnss_new_data = 142;
  int32 ublox4_gnss_fix = 143;
  int32 ublox4_gnss_num_sats = 144;
  int32 ublox4_gnss_week = 145;
  float ublox4_gnss_alt_wgs84_m = 146;
  float ublox4_gnss_horz_acc_m = 147;
  float ublox4_gnss_vert_acc_m = 148;
  float ublox4_gnss_vel_acc_mps = 149;
  repeated float ublox4_gnss_ned_vel_mps = 150;
  double ublox4_gnss_tow_s = 151;
  double ublox4_gnss_lat_rad = 152;
  double ublox4_gnss_lon_rad = 153;

  /* UBLOX3 REL POS data */
  bool ublox3_relpos_avail = 200;
  bool ublox3_relpos_moving_baseline = 201;
  bool ublox3_relpos_heading_valid = 202;
  bool ublox3_relpos_normalized = 203;
  float ublox3_relpos_len_acc_m = 204;
  float ublox3_relpos_heading_rad = 205;
  float ublox3_relpos_heading_acc_rad = 206;
  double ublox3_relpos_len_m = 207;
  repeated float ublox3_relpos_acc_ned_m = 208;
  repeated double ublox3_relpos_ned_m = 209;

  /* UBLOX4 REL POS data */
  bool ublox4_relpos_avail = 210;
  bool ublox4_relpos_moving_baseline = 211;
  bool ublox4_relpos_heading_valid = 212;
  bool ublox4_relpos_normalized = 213;
  float ublox4_relpos_len_acc_m = 214;
  float ublox4_relpos_heading_rad = 215;
  float ublox4_relpos_heading_acc_rad = 216;
  double ublox4_relpos_len_m = 217;
  repeated float ublox4_relpos_acc_ned_m = 218;
  repeated double ublox4_relpos_ned_m = 219;

  /* Analog Data */
  repeated float adc_volt = 220;

  /* Air data */
  bool airdata_initialized = 240;
  float airdata_static_pres_pa = 241;
  float airdata_diff_pres_pa = 242;
  float airdata_alt_pres_m = 243;
  float airdata_ias_mps = 244;

  /* BFS Nav data */
  bool bfs_nav_healthy = 250;
  float bfs_nav_pitch_rad = 251;
  float bfs_nav_roll_rad = 252;
  float bfs_nav_heading_rad = 253;
  float bfs_nav_alt_wgs84_m = 254;
  repeated float bfs_nav_accel_mps2 = 255;
  repeated float bfs_nav_gyro_radps = 256;
  repeated float bfs_nav_mag_ut = 257;
  repeated float bfs_nav_ned_vel_mps = 258;
  double bfs_nav_lat_rad = 259;
  double bfs_nav_lon_rad = 260;

  /* VectorNav data */
  bool vector_nav_healthy = 270;
  float vector_nav_pitch_rad = 271;
  float vector_nav_roll_rad = 272;
  float vector_nav_heading_rad = 273;
  float vector_nav_alt_wgs84_m = 274;
  repeated float vector_nav_accel_mps2 = 275;
  repeated float vector_nav_gyro_radps = 276;
  repeated float vector_nav_mag_ut = 277;
  repeated float vector_nav_ned_vel_mps = 278;
  double vector_nav_lat_rad = 279;
  double vector_nav_lon_rad = 280;

  /* VMS data */
  bool vms_waypoint_reached = 300;
  bool vms_sbus_ch17 = 301;
  bool vms_sbus_ch18 = 302;
  bool vms_motors_enabled = 303;
  int32 vms_mode = 304;
  float vms_throttle_cmd_prcnt = 305;
  float vms_batt_volt_v = 306;
  float vms_batt_curr_ma = 307;
  float vms_batt_consumed_mah = 308;
  float vms_batt_remaining_prcnt = 309;
  float vms_batt_remaining_time_s = 310;
  repeated int32 vms_sbus_cnt = 311;
  repeated int32 vms_pwm_cnt = 312;
  repeated float vms_analog = 313;
  repeated float vms_sbus_cmd = 314;
  repeated float vms_pwm_cmd = 315;
  repeated float vms_aux = 316;

  /* Telemetry data */
  int32 waypoint_frame = 320;
  int32 waypoint_cmd = 321;
  float waypoint_param1 = 322;
  float waypoint_param2 = 323;
  float waypoint_param3 = 324;
  float waypoint_param4 = 325;
  sint32 waypoint_x = 326;
  sint32 waypoint_y = 327;
  float waypoint_z = 328;
  repeated float telem_param = 329;

  /* MS4525DO Differential Pressure data */
  bool ms4525do_diff_pres_installed = 340;
  bool ms4525do_diff_pres_healthy = 341;
  bool ms4525do_diff_pres_new_data = 342;
  float ms4525do_diff_pres_die_temp_c = 343;
  float ms4525do_diff_pres_pa = 344;
}
